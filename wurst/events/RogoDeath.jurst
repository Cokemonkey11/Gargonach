
package RogoDeath
    globals
        private constant int PARTICLESCOUNT = 15 //Count from 0.
        private constant int PARTICLEID = 'h009'
        private constant real FIDELITY = 1./30.
        private constant real LIGHTBURSTTIME = 2.
        private constant real FINISHEDEXPLOSIONTIME = LIGHTBURSTTIME + 2.
        private constant real PARTICLESTARTHEIGHT = 800.
        private constant real TARGETHEIGHT = 75.
        private constant real EXPLODESPEED = 900.*FIDELITY
        private constant real EXPLODESLOWDOWNRATE = 1.-(.3/4.) + (.1/8.)
        private constant real RETURNSPEED = 400.*FIDELITY
        private constant real REACHEDDIST = 100.
        private boolean ready = false
        private boolean array visible[PARTICLESCOUNT]
        private timer time = CreateTimer()
        private real timeElapsed = 0.
        private int steps = 0
        private int opacity = 0
        private unit array lightParticles[PARTICLESCOUNT]
        private real array particleVx[PARTICLESCOUNT]
        private real array particleVy[PARTICLESCOUNT]
        private real deadX
        private real deadY
        private real returnedCount
    end

    private function p()
        effect fx
        int index = 0
        real tempX
        real tempY
        real direction
        real dX
        real dY
        real distance
        timeElapsed = timeElapsed + FIDELITY
        if timeElapsed > 0. and timeElapsed < LIGHTBURSTTIME
            if visible[0] == false
                ShowUnit(lightParticles[0], true)
                UnitAddAbility(lightParticles[0], 'Aloc')
                visible[0] = true
                deadX = GetUnitX(units_donRogo)
                deadY = GetUnitY(units_donRogo)
                SetUnitX(lightParticles[0], deadX)
                SetUnitY(lightParticles[0], deadY)
                SetUnitFlyHeight(lightParticles[0], PARTICLESTARTHEIGHT, 0.)
            end
            SetUnitFlyHeight(lightParticles[0], PARTICLESTARTHEIGHT-(timeElapsed/LIGHTBURSTTIME)*(PARTICLESTARTHEIGHT-TARGETHEIGHT), 0.)
            SetUnitVertexColor(units_donRogo, 255, 255, 255, R2I(255-(timeElapsed/LIGHTBURSTTIME)*255))
        elseif timeElapsed > LIGHTBURSTTIME and timeElapsed < FINISHEDEXPLOSIONTIME
            if visible[1] == false
                loop
                    exitwhen index > PARTICLESCOUNT
                    ShowUnit(lightParticles[index], true)
                    UnitAddAbility(lightParticles[index], 'Aloc')
                    visible[index] = true
                    SetUnitX(lightParticles[index], deadX)
                    SetUnitY(lightParticles[index], deadY)
                    particleVx[index] = EXPLODESPEED*Cos(index*2*bj_PI/(PARTICLESCOUNT + 1))
                    particleVy[index] = EXPLODESPEED*Sin(index*2*bj_PI/(PARTICLESCOUNT + 1))
                    index++
                end
                fx = AddSpecialEffect(helper_FLASHMODEL, deadX, deadY)
                DestroyEffect(fx)
                fx = null
                returnedCount = 0
            end
            RemoveUnit(units_donRogo)
            index = 0
            loop
                exitwhen index > PARTICLESCOUNT
                SetUnitX(lightParticles[index], GetUnitX(lightParticles[index]) + particleVx[index])
                SetUnitY(lightParticles[index], GetUnitY(lightParticles[index]) + particleVy[index])
                particleVx[index] = particleVx[index]*EXPLODESLOWDOWNRATE
                particleVy[index] = particleVy[index]*EXPLODESLOWDOWNRATE
                index++
            end
            units_donRogo = CreateUnit(Player(0), units_HEROID, terrain_STARTX, terrain_STARTY, 270.)
            SetUnitVertexColor(units_donRogo, 255, 255, 255, 0)
            ShowUnit(units_donRogo, false)
            PauseUnit(units_donRogo, true)
            UnitAddAbility(units_donRogo, 'Aloc')
            SetUnitTimeScale(units_donRogo, 0.)
        elseif timeElapsed > FINISHEDEXPLOSIONTIME and ready == false
            index = 0
            loop
                exitwhen index > PARTICLESCOUNT
                if visible[index]
                    tempX = GetUnitX(lightParticles[index])
                    tempY = GetUnitY(lightParticles[index])
                    direction = Atan2(terrain_STARTY-tempY, terrain_STARTX-tempX)
                    SetUnitX(lightParticles[index], tempX + RETURNSPEED*Cos(direction))
                    SetUnitY(lightParticles[index], tempY + RETURNSPEED*Sin(direction))
                    dX = tempX-terrain_STARTX
                    dY = tempY-terrain_STARTY
                    distance = SquareRoot(dX*dX + dY*dY)
                    if distance < REACHEDDIST
                        returnedCount++
                        if returnedCount == 1
                            ShowUnit(units_donRogo, true)
                        end
                        ShowUnit(lightParticles[index], false)
                        visible[index] = false
                        SetUnitVertexColor(units_donRogo, 255, 255, 255, R2I(returnedCount*255/(PARTICLESCOUNT + 1)))
                        fx = AddSpecialEffect(helper_FLASHMODEL, terrain_STARTX, terrain_STARTY)
                        DestroyEffect(fx)
                        fx = null
                        if returnedCount > PARTICLESCOUNT
                            ready = true
                        end
                    end
                end
                index++
            end
        else
            PauseTimer(time)
            RemoveUnit(units_donRogo)
            units_donRogo = CreateUnit(Player(0), units_HEROID, terrain_STARTX, terrain_STARTY, 270.)
        end
    end

    private function c takes nothing returns boolean
        if GetTriggerUnit() == units_donRogo
            timeElapsed = 0.
            ready = false
            TimerStart(time, FIDELITY, true, function p)
        end
        return false
    end

    init
        int index = 0
        trigger t = CreateTrigger()
        TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_DEATH)
        TriggerAddCondition(t, Condition(function c))
        loop
            exitwhen index > PARTICLESCOUNT
            lightParticles[index] = CreateUnit(Player(0), PARTICLEID, 0., 0., 270.)
            ShowUnit(lightParticles[index], false)
            UnitAddAbility(lightParticles[index], 'Aloc')
            index++
        end
        t = null
    end
end
