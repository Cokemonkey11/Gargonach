package AggroControl
    import Units
    import Lavawells

    class AmountDat
        int amount
        real timeLeft
    end

    constant ATTACKCOOLDOWN = 5.
    constant MAXDIST = 1000.
    constant FIDELITY = 1./2.
    constant TIMERFIDELITY = 1./30.

    constant LAVAATTACKORDER = "breathoffire"
    constant SMOKESTACKORDER = "deathanddecay"

    var aggro = 0
    var increasedAggro = 0
    var timeSinceLastAttack = 0.
    real radOffs
    AmountDat array amountStack
    var amountIndex = -1
    timer time = CreateTimer()

    function p()
        AmountDat tempDat
        int index = 0
        loop
            exitwhen index > amountIndex
            tempDat = amountStack[index]
            tempDat.timeLeft = tempDat.timeLeft-TIMERFIDELITY
            if tempDat.timeLeft < 0.
                increasedAggro = increasedAggro-tempDat.amount
                destroy tempDat
                amountStack[index] = amountStack[amountIndex]
                amountIndex--
                if amountIndex == -1
                    PauseTimer(time)
                end
            end
            index++
        end
    end

    public function increaseAggro takes int amount, real timeLeft returns nothing
        AmountDat tempDat = new AmountDat
        tempDat.amount = amount
        tempDat.timeLeft = timeLeft
        amountIndex++
        amountStack[amountIndex] = tempDat
        increasedAggro = increasedAggro + amount
        if amountIndex == 0
            TimerStart(time, TIMERFIDELITY, true, function p)
        end
    end

    function c takes nothing returns bool
        real rand
        real bossX = GetUnitX(gargonach)
        real bossY = GetUnitY(gargonach)
        real rogoX = GetUnitX(donRogo)
        real rogoY = GetUnitY(donRogo)
        real diffX = rogoX-bossX
        real diffY = rogoY-bossY
        real dist = SquareRoot(diffX*diffX + diffY*diffY)
        real facing
        real newX
        real newY
        timeSinceLastAttack = timeSinceLastAttack + FIDELITY
        if dist > MAXDIST
            aggro = 0
        else
            aggro = R2I(MAXDIST-dist)
        end
        if GetUnitCurrentOrder(gargonach) != OrderId("deathanddecay")
            if (aggro + increasedAggro) > 0 and GetUnitState(donRogo, UNIT_STATE_LIFE)>=1
                if timeSinceLastAttack > ATTACKCOOLDOWN and GetUnitState(donRogo, UNIT_STATE_LIFE)>=1
                    timeSinceLastAttack = 0.
                    if countAtGarg() > 0
                        rand = GetRandomReal(0., 100.)
                        if rand < 75.
                            IssuePointOrder(gargonach, LAVAATTACKORDER, GetUnitX(donRogo), GetUnitY(donRogo))
                        else
                            IssuePointOrder(gargonach, SMOKESTACKORDER, GetUnitX(donRogo), GetUnitY(donRogo))
                        end
                    else
                        IssuePointOrder(gargonach, SMOKESTACKORDER, GetUnitX(donRogo), GetUnitY(donRogo))
                    end
                else
                    if dist < 350. or dist > 500.
                        newX = GetUnitX(donRogo) + 400.*Cos(radOffs)
                        newY = GetUnitY(donRogo) + 400.*Sin(radOffs)
                        IssuePointOrder(gargonach, "move", newX, newY)
                        radOffs = radOffs + (GetRandomReal(-1*bj_PI/8, bj_PI/8))
                    else
                        IssueImmediateOrder(gargonach, "stop")
                        facing = Atan2(rogoY-bossY, rogoX-bossX)
                        radOffs = facing + bj_PI + GetRandomReal(-1*bj_PI/8, bj_PI/8)
                        if GetUnitState(gargonach, UNIT_STATE_LIFE)>=1 and isUnitPaused(gargonach) == false
                            SetUnitFacingTimed(gargonach, facing*bj_RADTODEG, FIDELITY)
                        end
                    end
                end
            else
                IssuePointOrder(gargonach, "move", 0., 0.)
            end
        end
        return false
    end

    init
        trigger t = CreateTrigger()
        radOffs = GetRandomReal(0., bj_PI*2)
        TriggerRegisterTimerEvent(t, FIDELITY, true)
        TriggerAddCondition(t, Condition(function c))
    end
