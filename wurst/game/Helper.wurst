package Helper
    import TerrainMod

    constant TTVEL = 40.
    constant loc = Location(0, 0)
    string array playerColors

    public constant BANISHSOUND = "Abilities\\Spells\\Human\\Banish\\BanishCaster.wav"
    public constant DUSTMODEL   = "Objects\\Spawnmodels\\Undead\\ImpaleTargetDust\\ImpaleTargetDust.mdl"
    public constant SECRETFOUND = "Sound\\Interface\\SecretFound.wav"
    public constant FLASHMODEL  = "Abilities\\Spells\\Human\\HolyBolt\\HolyBoltSpecialArt.mdl"

    public string array ghoulSounds

    public function sound3d(string what, real x, real y, real z)
        sound snd = CreateSound(what, false, true, false, 12700, 12700, "")
        SetSoundPosition(snd, x, y, z)
        SetSoundVolume(snd, 127)
        StartSound(snd)
        KillSoundWhenDone(snd)

    public function globalSound(string what, int volume) //note volume should be between 0 and 127
        sound snd = CreateSound(what, false, false, false, 12700, 12700, "")
        SetSoundVolume(snd, volume)
        StartSound(snd)
        KillSoundWhenDone(snd)

    public function quickTTAll(string s, real x, real y, real rad)
        texttag t = CreateTextTag()
        SetTextTagColor(t, 200, 200, 200, 200)
        SetTextTagLifespan(t, 2.)
        SetTextTagFadepoint(t, 1.)
        SetTextTagPermanent(t, false)
        SetTextTagPos(t, x, y, 25.)
        SetTextTagText(t, s, 12.*.0023)
        SetTextTagVelocity(t, TTVEL*Cos(rad)*.071/128., TTVEL*Sin(rad)*.071/128.)
        SetTextTagVisibility(t, true)

    public function soundInitialize(string s)
        sound snd = CreateSound(s, false, false, false, 12700, 12700, "")
        SetSoundVolume(snd, 1)
        StartSound(snd)
        KillSoundWhenDone(snd)

    public function isInMap(real x, real y) returns bool
        return (x < MAX_X and x > MIN_X and y > MIN_Y and y < MAX_Y)

    public class LightDat
        lightning light
        real timeLeft
        real startTime

    constant FIDELITY = 1./30.
    constant time = CreateTimer()
    var stackIndex = -1
    LightDat array lightDB

    function p()
        int index = 0
        LightDat tempDat
        while index <= stackIndex
            tempDat = lightDB[index]
            tempDat.timeLeft = tempDat.timeLeft-FIDELITY
            SetLightningColor(tempDat.light, 1., 1., 1., tempDat.timeLeft/tempDat.startTime)
            if tempDat.timeLeft < 0.
                DestroyLightning(tempDat.light)
                destroy tempDat
                lightDB[index] = lightDB[stackIndex]
                stackIndex--
                if stackIndex == -1
                    PauseTimer(time)


            index++


    public function tempLightning(string typ, real duration, real xS, real yS, real zS, real xF, real yF, real zF)
        let tempDat = new LightDat()
        tempDat.light = AddLightningEx(typ, false, xS, yS, vec2(xS, yS).getTerrainZ() + zS, xF, yF, vec2(xF, yF).getTerrainZ() + zF)
        tempDat.timeLeft = duration
        tempDat.startTime = duration
        stackIndex++
        lightDB[stackIndex] = tempDat
        if stackIndex == 0
            TimerStart(time, FIDELITY, true, function p)

    public function angle.smallestDiff(angle other) returns angle
        return this.direction().dot(other.direction()).acos().asAngleRadians()

    public function angle.toVec2() returns vec2
        return vec2(0., 0.).polarOffset(this, 1.)

    public function angle.lt(angle other) returns bool
        return (this.radians() % (2. * PI)) < other.radians()

    public function angle.toString() returns string
        return (this.degrees() % 360.).toString(2)

    public function unit.isFacing(unit which, real maxRange, angle maxAng) returns bool
        let angBetween = this.getPos().angleTo(which.getPos())
        let distBetween = this.getPos().distanceToSq(which.getPos())
        return (angBetween.smallestDiff(this.getFacingAngle())).lt(maxAng) and distBetween < maxRange*maxRange
