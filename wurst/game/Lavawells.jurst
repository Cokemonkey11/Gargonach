package Lavawells
    import Game
    import Helper
    import Knockback3
    import Units

    class Lavae
        unit ball
        string state
        real xVel
        real yVel
    end

    constant MAXWELLS   = 4
    constant LAVATOHOLD = 5
    constant LAVAID     = 'h008'

    constant COLLISIONRADIUS   = 50.
    constant FIDELITY          = 2.
    constant TIMERRATE         = 1./30.
    constant TOGARGONACHSPEED  = 500.*TIMERRATE
    constant INMOTIONSPEED     = 700.*TIMERRATE
    constant REACHED_GAR_DIST  = 200.
    constant ATRECTSIZE        = 150.
    constant LAVADAMAGE        = 100.
    constant TARGETOFFSETSIZE  = 150.
    constant HEALVALUE         = 50.
    constant MAXHEIGHTTOGETHIT = 100.

    constant grp = CreateGroup()
    constant time = CreateTimer()

    Lavae array lavaStack
    var stackIndex = -1

    function p()
        Lavae tempDat
        bool detonated
        int index = 0
        real garX = GetUnitX(gargonach)
        real garY = GetUnitY(gargonach)
        real ballX
        real ballY
        real dir
        real dX
        real dY
        real dist
        real newX
        real newY
        loop
            exitwhen index > stackIndex
            tempDat = lavaStack[index]
            ballX = GetUnitX(tempDat.ball)
            ballY = GetUnitY(tempDat.ball)
            if tempDat.state == "toGargonach"
                dir = Atan2(garY-ballY, garX-ballX)
                newX = ballX + TOGARGONACHSPEED*Cos(dir)
                newY = ballY + TOGARGONACHSPEED*Sin(dir)
                SetUnitX(tempDat.ball, newX)
                SetUnitY(tempDat.ball, newY)
                dX = garX-ballX
                dY = garY-ballY
                dist = SquareRoot(dX*dX + dY*dY)
                detonated = false
                GroupEnumUnitsInRange(grp, newX, newY, COLLISIONRADIUS, null)
                loop
                    let fst = FirstOfGroup(grp)
                    exitwhen fst == null or detonated
                    if fst == donRogo and GetUnitState(fst, UNIT_STATE_LIFE)>=1
                        detonated = true
                        UnitDamageTarget(gargonach, donRogo, LAVADAMAGE, true, true, ATTACK_TYPE_MAGIC, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
                    elseif GetUnitTypeId(fst) == SHIELDID and GetUnitState(fst, UNIT_STATE_LIFE)>=1
                        detonated = true
                        sound3d(BANISHSOUND, ballX, ballY, getZ(ballX, ballY) + 50.)
                    end
                    GroupRemoveUnit(grp, fst)
                end
                if detonated
                    KillUnit(tempDat.ball)
                    lavaStack[index] = lavaStack[stackIndex]
                    stackIndex--
                    destroy tempDat
                    if stackIndex == -1
                        PauseTimer(time)
                    end
                end
                if dist < REACHED_GAR_DIST
                    tempDat.state = "atGargonach"
                    tempDat.xVel = GetRandomReal(-1*ATRECTSIZE, ATRECTSIZE)
                    tempDat.yVel = GetRandomReal(-1*ATRECTSIZE, ATRECTSIZE)
                    SetUnitState(gargonach, UNIT_STATE_LIFE, GetUnitState(gargonach, UNIT_STATE_LIFE) + HEALVALUE)
                end
            elseif tempDat.state == "atGargonach"
                if GetUnitState(gargonach, UNIT_STATE_LIFE)>=1
                    SetUnitX(tempDat.ball, garX + tempDat.xVel)
                    SetUnitY(tempDat.ball, garY + tempDat.yVel)
                else
                    KillUnit(tempDat.ball)
                    lavaStack[index] = lavaStack[stackIndex]
                    stackIndex--
                    destroy tempDat
                    if stackIndex == -1
                        PauseTimer(time)
                    end
                end
            elseif tempDat.state == "inMotion"
                let newPos = vec2(ballX, ballY) + vec2(tempDat.xVel, tempDat.yVel)
                detonated = false
                if isInMap(newPos.x, newPos.y)
                    tempDat.ball.setPos(newPos)
                    GroupEnumUnitsOfPlayer(grp, Player(0), null)
                    loop
                        exitwhen not grp.hasNext()
                        let fst = grp.next()
                        if fst.isAlive() and (newPos - fst.getPos()).lengthSquared() < COLLISIONRADIUS*COLLISIONRADIUS
                            if fst == donRogo
                                detonated = true
                                UnitDamageTarget(gargonach, donRogo, LAVADAMAGE, true, true, ATTACK_TYPE_MAGIC, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
                                Knockback3.add(donRogo, 700., angle(Atan2(tempDat.yVel, tempDat.xVel)), angle(bj_PI/16))
                            elseif fst.getTypeId() == SHIELDID
                                detonated = true
                                sound3d(BANISHSOUND, ballX, ballY, getZ(ballX, ballY) + 50.)
                            end
                        end
                    end
                else
                    detonated = true
                end

                if detonated
                    KillUnit(tempDat.ball)
                    lavaStack[index] = lavaStack[stackIndex]
                    stackIndex--
                    destroy tempDat
                    if stackIndex == -1
                        PauseTimer(time)
                    end
                end
            else
                BJDebugMsg("error unknown state")
            end
            index++
        end
    end

    public function attack()
        int index = 0
        real donX = GetUnitX(donRogo)
        real donY = GetUnitY(donRogo)
        real ballX
        real ballY
        real dir
        Lavae tempDat
        loop
            exitwhen index > stackIndex
            tempDat = lavaStack[index]
            if tempDat.state == "atGargonach"
                tempDat.state = "inMotion"
                ballX = GetUnitX(tempDat.ball) + GetRandomReal(-1*TARGETOFFSETSIZE, TARGETOFFSETSIZE)
                ballY = GetUnitY(tempDat.ball) + GetRandomReal(-1*TARGETOFFSETSIZE, TARGETOFFSETSIZE)
                dir = Atan2(donY-ballY, donX-ballX)
                tempDat.xVel = INMOTIONSPEED*Cos(dir)
                tempDat.yVel = INMOTIONSPEED*Sin(dir)
            end
            index++
        end
    end

    public function countAtGarg() returns int
        int returner = 0
        int index = 0
        Lavae tempDat
        loop
            exitwhen index > stackIndex
            tempDat = lavaStack[index]
            if tempDat.state == "atGargonach" or tempDat.state == "toGargonach"
                returner++
            end
            index++
        end
        return returner
    end

    function countLiveWells takes nothing returns int
        int returner = 0
        GroupEnumUnitsInRect(grp, bj_mapInitialPlayableArea, null)
        loop
            let fst = FirstOfGroup(grp)
            exitwhen fst == null
            if GetUnitTypeId(fst) == ID_LAVA_WELL and GetUnitState(fst, UNIT_STATE_LIFE)>=1
                returner++
            end
            GroupRemoveUnit(grp, fst)
        end
        return returner
    end

    function c takes nothing returns bool
        int index = 0
        int alive = 0
        int atGargCount
        int rand
        int liveCount = countLiveWells()
        Lavae tempDat
        loop
            exitwhen index>=liveCount
            GroupEnumUnitsInRect(grp, bj_mapInitialPlayableArea, null)
            if liveCount == 0 or GetUnitState(gargonach, UNIT_STATE_LIFE) < 1.
                DisableTrigger(GetTriggeringTrigger())
            end
            if GetUnitState(gargonach, UNIT_STATE_LIFE) < 1.
                isOver = true
            end
            loop
                let fst = FirstOfGroup(grp)
                exitwhen fst == null
                if GetUnitTypeId(fst) == ID_LAVA_WELL and GetUnitState(fst, UNIT_STATE_LIFE)>=1 and isOver == false
                    alive++
                    atGargCount = countAtGarg()
                    if atGargCount < LAVATOHOLD
                        loop
                            rand = GetRandomInt(0, MAXWELLS)
                            exitwhen GetUnitState(lavawells[rand], UNIT_STATE_LIFE)>=1
                        end
                        tempDat = new Lavae
                        tempDat.ball = CreateUnit(Player(1), LAVAID, GetUnitX(lavawells[rand]), GetUnitY(lavawells[rand]), 270.)
                        tempDat.state = "toGargonach"
                        tempDat.xVel = 1.
                        tempDat.yVel = 1.
                        stackIndex++
                        lavaStack[stackIndex] = tempDat
                        if stackIndex == 0
                            TimerStart(time, TIMERRATE, true, function p)
                        end
                    end
                end
                GroupRemoveUnit(grp, fst)
            end
            index++
        end
        if alive == 0
            DestroyTrigger(GetTriggeringTrigger())
        end
        return false
    end

    init
        trigger t = CreateTrigger()
        TriggerRegisterTimerEvent(t, FIDELITY, true)
        TriggerAddCondition(t, Condition(function c))
    end
