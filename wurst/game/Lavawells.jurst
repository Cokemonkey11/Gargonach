
package Lavawells
	import Helper
	import Knockback3
	import Game

    class lavae
        unit ball
        string state
        real xVel
        real yVel
    end

    globals
        private constant int MAXWELLS = 4
        private constant int LAVATOHOLD = 5
        private constant int LAVAID = 'h008'
        private constant real COLLISIONRADIUS = 50.
        private constant real FIDELITY = 2.
        private constant real TIMERRATE = 1./30.
        private constant real TOGARGONACHSPEED = 500.*TIMERRATE
        private constant real INMOTIONSPEED = 700.*TIMERRATE
        private constant real REACHED_GAR_DIST = 200.
        private constant real ATRECTSIZE = 150.
        private constant real LAVADAMAGE = 100.
        private constant real TARGETOFFSETSIZE = 150.
        private constant real HEALVALUE = 50.
        private constant real MAXHEIGHTTOGETHIT = 100.
        private lavae array lavaStack
        private group grp = CreateGroup()
        private int stackIndex = -1
        private timer time = CreateTimer()
    end

    private function p()
        lavae tempDat
        boolean detonated = false
        effect fx
        int index = 0
        real garX = GetUnitX(units_gargonach)
        real garY = GetUnitY(units_gargonach)
        real ballX
        real ballY
        real dir
        real dX
        real dY
        real dist
        unit fst
        real newX
        real newY
        loop
            exitwhen index > stackIndex
            tempDat = lavaStack[index]
            ballX = GetUnitX(tempDat.ball)
            ballY = GetUnitY(tempDat.ball)
            newX = 0
            newY = 0
            fst = null
            dist = 0
            dY = 0
            dX = 0
            dir = 0
            if tempDat.state == "toGargonach"
                dir = Atan2(garY-ballY, garX-ballX)
                newX = ballX + TOGARGONACHSPEED*Cos(dir)
                newY = ballY + TOGARGONACHSPEED*Sin(dir)
                SetUnitX(tempDat.ball, newX)
                SetUnitY(tempDat.ball, newY)
                dX = garX-ballX
                dY = garY-ballY
                dist = SquareRoot(dX*dX + dY*dY)
                detonated = false
                GroupEnumUnitsInRange(grp, newX, newY, COLLISIONRADIUS, null)
                loop
                    fst = FirstOfGroup(grp)
                    exitwhen fst == null or detonated
                    if fst == units_donRogo and GetUnitState(fst, UNIT_STATE_LIFE)>=1
                        detonated = true
                        UnitDamageTarget(units_gargonach, units_donRogo, LAVADAMAGE, true, true, ATTACK_TYPE_MAGIC, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
                    elseif GetUnitTypeId(fst) == units_SHIELDID and GetUnitState(fst, UNIT_STATE_LIFE)>=1
                        detonated = true
                        helper_sound3d(helper_BANISHSOUND, ballX, ballY, helper_getZ(ballX, ballY) + 50.)
                    end
                    GroupRemoveUnit(grp, fst)
                end
                if detonated
                    KillUnit(tempDat.ball)
                    lavaStack[index] = lavaStack[stackIndex]
                    stackIndex--
                    destroy tempDat
                    if stackIndex == -1
                        PauseTimer(time)
                    end
                end
                if dist < REACHED_GAR_DIST
                    tempDat.state = "atGargonach"
                    tempDat.xVel = GetRandomReal(-1*ATRECTSIZE, ATRECTSIZE)
                    tempDat.yVel = GetRandomReal(-1*ATRECTSIZE, ATRECTSIZE)
                    SetUnitState(units_gargonach, UNIT_STATE_LIFE, GetUnitState(units_gargonach, UNIT_STATE_LIFE) + HEALVALUE)
                end
            elseif tempDat.state == "atGargonach"
                if GetUnitState(units_gargonach, UNIT_STATE_LIFE)>=1
                    SetUnitX(tempDat.ball, garX + tempDat.xVel)
                    SetUnitY(tempDat.ball, garY + tempDat.yVel)
                else
                    KillUnit(tempDat.ball)
                    lavaStack[index] = lavaStack[stackIndex]
                    stackIndex--
                    destroy tempDat
                    if stackIndex == -1
                        PauseTimer(time)
                    end
                end
            elseif tempDat.state == "inMotion"
                newX = ballX + tempDat.xVel
                newY = ballY + tempDat.yVel
                detonated = false
                if helper_isInMap(newX, newY)
                    SetUnitX(tempDat.ball, newX)
                    SetUnitY(tempDat.ball, newY)
                    GroupEnumUnitsInRange(grp, newX, newY, COLLISIONRADIUS, null)
                    loop
                        fst = FirstOfGroup(grp)
                        exitwhen fst == null or detonated
                        if fst == units_donRogo and GetUnitState(fst, UNIT_STATE_LIFE)>=1 and GetUnitFlyHeight(units_donRogo) < MAXHEIGHTTOGETHIT
                            detonated = true
                            UnitDamageTarget(units_gargonach, units_donRogo, LAVADAMAGE, true, true, ATTACK_TYPE_MAGIC, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
                            knockback_add(units_donRogo, LAVADAMAGE/3, Atan2(tempDat.yVel, tempDat.xVel), bj_PI/16)
                        elseif GetUnitTypeId(fst) == units_SHIELDID and GetUnitState(fst, UNIT_STATE_LIFE)>=1
                            detonated = true
                            helper_sound3d(helper_BANISHSOUND, ballX, ballY, helper_getZ(ballX, ballY) + 50.)
                        end
                        GroupRemoveUnit(grp, fst)
                    end
                else
                    detonated = true
                end
                if detonated
                    KillUnit(tempDat.ball)
                    lavaStack[index] = lavaStack[stackIndex]
                    stackIndex--
                    destroy tempDat
                    if stackIndex == -1
                        PauseTimer(time)
                    end
                end
            else
                BJDebugMsg("error unknown state")
            end
            index++
        end
    end

    public function attack()
        int index = 0
        real donX = GetUnitX(units_donRogo)
        real donY = GetUnitY(units_donRogo)
        real ballX
        real ballY
        real dir
        lavae tempDat
        loop
            exitwhen index > stackIndex
            tempDat = lavaStack[index]
            if tempDat.state == "atGargonach"
                tempDat.state = "inMotion"
                ballX = GetUnitX(tempDat.ball) + GetRandomReal(-1*TARGETOFFSETSIZE, TARGETOFFSETSIZE)
                ballY = GetUnitY(tempDat.ball) + GetRandomReal(-1*TARGETOFFSETSIZE, TARGETOFFSETSIZE)
                dir = Atan2(donY-ballY, donX-ballX)
                tempDat.xVel = INMOTIONSPEED*Cos(dir)
                tempDat.yVel = INMOTIONSPEED*Sin(dir)
            end
            index++
        end
    end

    public function countAtGarg takes boolean includeOnWay returns int
        int returner = 0
        int index = 0
        lavae tempDat
        loop
            exitwhen index > stackIndex
            tempDat = lavaStack[index]
            if tempDat.state == "atGargonach" or tempDat.state == "toGargonach"
                returner++
            end
            index++
        end
        return returner
    end

    private function countLiveWells takes nothing returns int
        int returner = 0
        unit fst
        GroupEnumUnitsInRect(grp, bj_mapInitialPlayableArea, null)
        loop
            fst = FirstOfGroup(grp)
            exitwhen fst == null
            if GetUnitTypeId(fst) == units_LAVAWELLID and GetUnitState(fst, UNIT_STATE_LIFE)>=1
                returner++
            end
            GroupRemoveUnit(grp, fst)
        end
        return returner
    end

    private function c takes nothing returns boolean
        int index = 0
        int alive = 0
        int atGargCount
        int rand
        int liveCount = countLiveWells()
        lavae tempDat
        unit fst = null
        loop
            exitwhen index>=liveCount
            GroupEnumUnitsInRect(grp, bj_mapInitialPlayableArea, null)
            if liveCount == 0 or GetUnitState(units_gargonach, UNIT_STATE_LIFE) < 1.
                DisableTrigger(GetTriggeringTrigger())
            end
            if GetUnitState(units_gargonach, UNIT_STATE_LIFE) < 1.
                game_isOver = true
            end
            loop
                fst = FirstOfGroup(grp)
                exitwhen fst == null
                if GetUnitTypeId(fst) == units_LAVAWELLID and GetUnitState(fst, UNIT_STATE_LIFE)>=1 and game_isOver == false
                    alive++
                    atGargCount = countAtGarg(true)
                    if atGargCount < LAVATOHOLD
                        loop
                            rand = GetRandomInt(0, MAXWELLS)
                            exitwhen GetUnitState(units_lavawells[rand], UNIT_STATE_LIFE)>=1
                        end
                        tempDat = new lavae
                        tempDat.ball = CreateUnit(Player(1), LAVAID, GetUnitX(units_lavawells[rand]), GetUnitY(units_lavawells[rand]), 270.)
                        tempDat.state = "toGargonach"
                        tempDat.xVel = 1.
                        tempDat.yVel = 1.
                        stackIndex++
                        lavaStack[stackIndex] = tempDat
                        if stackIndex == 0
                            TimerStart(time, TIMERRATE, true, function p)
                        end
                    end
                end
                GroupRemoveUnit(grp, fst)
            end
            index++
        end
        if alive == 0
            DestroyTrigger(GetTriggeringTrigger())
        end
        return false
    end

    init
        trigger t = CreateTrigger()
        TriggerRegisterTimerEvent(t, FIDELITY, true)
        TriggerAddCondition(t, Condition(function c))
    end
end
