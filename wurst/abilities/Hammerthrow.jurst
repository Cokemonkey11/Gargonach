package Hammerthrow
    import Helper
    import Units

    constant HAMMERTHROW = 'A000'
    constant ATTACKID    = 'A002'
    constant HAMMERID    = 'h006'

    constant FIDELITY     = 1./30.
    constant SPEED        = 1400.*FIDELITY
    constant STARTHEIGHT  = 150.
    constant GRAVITY      = 1.
    constant ENUMRAD      = 150.
    constant DAMAGE       = 150.
    constant MINFLYHEIGHT = 5.
    constant TIMEOUT      = 10.

    constant STORMBOLTMODEL = "Abilities\\Spells\\Human\\StormBolt\\StormBoltMissile.mdl"

    constant time = CreateTimer()
    constant grp = CreateGroup()

    boolexpr cond
    real vX
    real vY
    real vZ

    function tempC takes nothing returns bool
        let tU = GetTriggerUnit()
        if tU == donRogo or tU == null
            PauseUnit(hammer, false)
            ShowUnit(hammer, false)
            UnitAddAbility(donRogo, HAMMERTHROW)
            UnitAddAbility(donRogo, ATTACKID)
            DestroyTrigger(GetTriggeringTrigger())
        end

        return false
    end

    function p()
        bool damaged = false
        real currX = GetUnitX(hammer)
        real currY = GetUnitY(hammer)
        real currZ = getZ(currX, currY)
        real targX = currX + vX
        real targY = currY + vY
        real targZ = getZ(targX, targY)
        real diffZ = targZ-currZ
        unit fst
        trigger tTemp
        SetUnitFlyHeight(hammer, GetUnitFlyHeight(hammer)-diffZ + vZ, 0.)
        vZ = vZ-GRAVITY
        SetUnitX(hammer, targX)
        SetUnitY(hammer, targY)

        GroupEnumUnitsInRange(grp, targX, targY, ENUMRAD, null)
        loop
            fst = FirstOfGroup(grp)
            exitwhen fst == null or damaged
            if IsUnitEnemy(fst, Player(0)) and GetUnitState(fst, UNIT_STATE_LIFE)>=1
                damaged = true
                if GetUnitTypeId(fst) != ID_LAVA_WELL and fst != sandMill
                    UnitDamageTarget(hammer, fst, DAMAGE, true, true, ATTACK_TYPE_MAGIC, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)
                end
            end
            GroupRemoveUnit(grp, fst)
        end

        if damaged or GetUnitFlyHeight(hammer) < MINFLYHEIGHT
            AddSpecialEffect(STORMBOLTMODEL, GetUnitX(hammer), GetUnitY(hammer)).destr()
            PauseTimer(time)
            UnitRemoveAbility(hammer, 'Aloc')
            tTemp = CreateTrigger()
            TriggerRegisterUnitInRange(tTemp, hammer, 150., null)
            TriggerRegisterTimerEvent(tTemp, TIMEOUT, false)
            TriggerAddCondition(tTemp, cond)
            PauseUnit(hammer, true)
        end
    end

    function c takes nothing returns bool
        unit tU
        real ang
        real uX
        real uY
        if GetSpellAbilityId() == HAMMERTHROW
            tU = GetTriggerUnit()
            uX = GetUnitX(tU)
            uY = GetUnitY(tU)
            SetUnitX(hammer, uX)
            SetUnitY(hammer, uY)
            ang = Atan2(GetSpellTargetY()-uY, GetSpellTargetX()-uX)
            vX = SPEED*Cos(ang)
            vY = SPEED*Sin(ang)
            vZ = 0.
            UnitRemoveAbility(donRogo, ATTACKID)
            UnitRemoveAbility(donRogo, HAMMERTHROW)
            ShowUnit(hammer, true)
            PauseUnit(hammer, false)
            SetUnitFacing(hammer, ang*bj_RADTODEG)
            SetUnitFlyHeight(hammer, STARTHEIGHT, 0.)
            TimerStart(time, FIDELITY, true, function p)
        end
        return false
    end

    init
        trigger t = CreateTrigger()
        cond = Condition(function tempC)
        hammer = CreateUnit(Player(0), HAMMERID, 0., 0., 270.)
        UnitAddAbility(hammer, LOCUSTID)
        UnitAddAbility(hammer, 'Arav')
        UnitRemoveAbility(hammer, 'Arav')
        SetUnitInvulnerable(hammer, true)
        ShowUnit(hammer, false)
        TriggerRegisterAnyUnitEventBJ(t, EVENT_PLAYER_UNIT_SPELL_EFFECT)
        TriggerAddCondition(t, Condition(function c))
    end
