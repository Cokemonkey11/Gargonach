package Use
    import Fx
    import Game
    import GameTimer
    import Helper
    import LinkedListModule
    import TerrainMod
    import Units

    constant USEID             = 'A001'
    constant LIGHTID           = 'h003'
    constant HEALTHYFOUNTAINID = 'h00E'
    constant NUM_WISPS         =     8

    constant ILLUMINATIONHEIGHT    =  200.
    constant LIGHTNINGBOLTDISTANCE = 1600.
    constant LIGHTNINGRADIUS       =  200.
    constant WISP_HEIGHT_CENTER    =  140.
    constant WISP_HEAL_PER_SECOND  =   10.
    constant WISP_RADIUS           =  120.
    constant HEAL_RADIUS           =  400.

    constant ILLUMINATION   = "Abilities\\Spells\\Orc\\HealingWave\\HealingWave.wav"
    constant LIGHTNINGSOUND = "Abilities\\Spells\\Items\\WandOfNeutralization\\WandOfNeutralization.wav"

    constant PATH_WISP = "units\\nightelf\\Wisp\\Wisp.mdl"

    constant CLOCK      = CreateTimer()
    var      illumCount = 0

    class WellWisp
        use LinkedListModule

        static constant clock = CreateTimer()

        Fx fx       = new Fx(fountain.getPos().withZ(WISP_HEIGHT_CENTER), angle(0.))
        angle ang   = angle(GetRandomReal(0., 2. * bj_PI))
        real offset = GetRandomReal(0., 2. * bj_PI)
        real velFac = GetRandomReal(1., 3.)


        static function tick()
            let iter = iterator()
            loop
                exitwhen not iter.hasNext()
                let inst = iter.next()

                let centroid = fountain.getPos().withZ(WISP_HEIGHT_CENTER)
                inst.fx.setXYheight(centroid.polarProject(WISP_RADIUS, inst.ang, angle((getElapsedGameTime() + inst.offset) * inst.velFac)))
            end
            iter.close()
        end


        construct()
            fx..setOwner(Player(1), true)..setFx(PATH_WISP)
            if size == 1
                clock.startPeriodic(ANIMATION_PERIOD, function tick)
            end
        end
    end


    constant grp = CreateGroup()
    function healTick()
        grp.enumUnitsInRange(fountain.getPos(), HEAL_RADIUS)
        loop
            exitwhen not grp.hasNext()
            let iter = grp.next()

            if iter == donRogo and iter.isAlive()
                donRogo.setHP(donRogo.getHP() + WISP_HEAL_PER_SECOND * ANIMATION_PERIOD)
            end
        end
    end

    function healingStart()
        var ctr = 0
        loop
            exitwhen ctr >= NUM_WISPS

            new WellWisp()

            ctr++
        end
        CLOCK.startPeriodic(ANIMATION_PERIOD, function healTick)
    end

    function c takes nothing returns bool
        unit targU
        real tUX
        real tUY
        real endX
        real endY
        real ang
        unit fst
        if GetSpellAbilityId() == USEID
            targU = GetSpellTargetUnit()
            if GetUnitTypeId(targU) == OBELISK
                illumCount++
                if illumCount == OBELISK_COUNT
                    FogEnable(false)
                    FogMaskEnable(false)
                    globalSound(SECRETFOUND, 127)
                    DisplayTextToPlayer(Player(0), 0, 0, "|cff999999The |robelisks|cff999999 have enabled map vision...|r")
                    QuestSetCompleted(enableLights, true)
                end
                tUX = GetUnitX(targU)
                tUY = GetUnitY(targU)
                CreateUnit(Player(0), LIGHTID, tUX, tUY, 270.)
                UnitAddAbility(targU, LOCUSTID)
                sound3d(ILLUMINATION, tUX, tUY, getZ(tUX, tUY) + ILLUMINATIONHEIGHT)
            elseif GetUnitTypeId(targU) == GENERATORID
                tUX = GetUnitX(targU)
                tUY = GetUnitY(targU)
                ang = Atan2(tUY-GetUnitY(donRogo), tUX-GetUnitX(donRogo))
                endX = tUX + LIGHTNINGBOLTDISTANCE*Cos(ang)
                endY = tUY + LIGHTNINGBOLTDISTANCE*Sin(ang)
                tempLightning("CLPB", 1., tUX, tUY, 200., endX, endY, 50.)
                sound3d(LIGHTNINGSOUND, tUX, tUY, getZ(tUX, tUY))
                GroupEnumUnitsInRange(grp, endX, endY, LIGHTNINGRADIUS, null)
                loop
                    fst = FirstOfGroup(grp)
                    exitwhen fst == null
                    if fst == fountain
                        globalSound(SECRETFOUND, 127)
                        tUX = GetUnitX(fountain)
                        tUY = GetUnitY(fountain)
                        RemoveUnit(fountain)
                        QuestSetCompleted(enableFountain, true)
                        fountain = CreateUnit(Player(0), HEALTHYFOUNTAINID, tUX, tUY, 270.)
                        UnitAddAbility(targU, 'Aloc')
                        permModify(tUX, tUY, TYPE_GRASS, 4)
                        healingStart()
                    end
                    GroupRemoveUnit(grp, fst)
                end
            else
                quickTTAll("I can't do that.", GetUnitX(donRogo), GetUnitY(donRogo), bj_PI/2)
            end
        end
        return false
    end

    function delayedC takes nothing returns bool
        soundInitialize(ILLUMINATION)
        soundInitialize(LIGHTNINGSOUND)
        return false
    end

    init
        trigger t = CreateTrigger()
        trigger delayed = CreateTrigger()
        TriggerRegisterPlayerUnitEvent(t, Player(0), EVENT_PLAYER_UNIT_SPELL_EFFECT, null)
        TriggerAddCondition(t, Condition(function c))
        TriggerRegisterTimerEvent(delayed, 0., false)
        TriggerAddCondition(delayed, Condition(function delayedC))
    end
